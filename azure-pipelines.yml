# Azure DevOps Pipeline for iOS Simulator Build
trigger:
- main
- develop

pool:
  vmImage: 'macOS-latest'

variables:
  - group: 'YardPass-Secrets' # Create this variable group in Azure DevOps

stages:
- stage: BuildiOS
  displayName: 'Build iOS App'
  jobs:
  - job: Build
    displayName: 'Build and Archive iOS'
    steps:
    
    - task: NodeTool@0
      displayName: 'Use Node.js 18'
      inputs:
        versionSpec: '18'
        
    - script: |
        npm ci
      displayName: 'Install dependencies'
      
    - script: |
        echo "VITE_SUPABASE_URL=$(VITE_SUPABASE_URL)" >> .env.local
        echo "VITE_SUPABASE_ANON_KEY=$(VITE_SUPABASE_ANON_KEY)" >> .env.local
        echo "VITE_SUPABASE_FUNCTIONS_URL=$(VITE_SUPABASE_FUNCTIONS_URL)" >> .env.local
        echo "VITE_STRIPE_PUBLISHABLE_KEY=$(VITE_STRIPE_PUBLISHABLE_KEY)" >> .env.local
        echo "VITE_MAPBOX_ACCESS_TOKEN=$(VITE_MAPBOX_ACCESS_TOKEN)" >> .env.local
      displayName: 'Create environment file'
      
    - script: |
        npm run build
      displayName: 'Build web assets'
      
    - script: |
        npm install -g @capacitor/cli
        if [ ! -d "ios" ]; then
          npx cap add ios
        fi
        npx cap sync ios
      displayName: 'Setup Capacitor iOS'
      
    - script: |
        cd ios/App
        # List available simulators
        echo "Available iOS Simulators:"
        xcrun simctl list devices ios
        
        # Build for iOS Simulator (no signing required)
        echo "Building for iOS Simulator..."
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Debug \
                   -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
                   -derivedDataPath $(Agent.BuildDirectory)/DerivedData \
                   build
                   
        echo "Build completed successfully!"
      displayName: 'Build for iOS Simulator'
      
    - script: |
        # Create and boot simulator
        echo "Creating iOS Simulator..."
        SIMULATOR_ID=$(xcrun simctl create "YardPass-Test" "iPhone 15" "iOS-17-2")
        echo "Created simulator: $SIMULATOR_ID"
        
        # Boot the simulator
        echo "Booting simulator..."
        xcrun simctl boot "$SIMULATOR_ID"
        
        # Wait for simulator to boot
        echo "Waiting for simulator to boot..."
        sleep 10
        
        # Install the app
        BUILT_PRODUCTS_DIR="$(Agent.BuildDirectory)/DerivedData/Build/Products/Debug-iphonesimulator"
        if [ -d "$BUILT_PRODUCTS_DIR/App.app" ]; then
          echo "Installing YardPass app on simulator..."
          xcrun simctl install "$SIMULATOR_ID" "$BUILT_PRODUCTS_DIR/App.app"
          
          # Launch the app
          echo "Launching YardPass app..."
          xcrun simctl launch "$SIMULATOR_ID" com.yardpass.app
          
          # Take a screenshot
          echo "Taking screenshot..."
          xcrun simctl io "$SIMULATOR_ID" screenshot $(Agent.BuildDirectory)/yardpass-screenshot.png
          
          # Get app info
          echo "App installed successfully!"
          xcrun simctl listapps "$SIMULATOR_ID" | grep -A 5 -B 5 "yardpass\|YardPass"
          
          # Create app bundle for download
          cd "$BUILT_PRODUCTS_DIR"
          zip -r $(Agent.BuildDirectory)/YardPass-Simulator.zip App.app/
          
        else
          echo "Build failed - no .app bundle found"
          ls -la "$(Agent.BuildDirectory)/DerivedData/Build/Products/"
          exit 1
        fi
        
        # Shutdown simulator
        xcrun simctl shutdown "$SIMULATOR_ID"
        xcrun simctl delete "$SIMULATOR_ID"
      displayName: 'Test App in iOS Simulator'
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Simulator App'
      inputs:
        pathToPublish: '$(Agent.BuildDirectory)/YardPass-Simulator.zip'
        artifactName: 'YardPass-iOS-Simulator'
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Screenshot'
      inputs:
        pathToPublish: '$(Agent.BuildDirectory)/yardpass-screenshot.png'
        artifactName: 'App-Screenshot'
      condition: succeededOrFailed()
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Logs'
      inputs:
        pathToPublish: '$(Agent.BuildDirectory)/DerivedData/Logs'
        artifactName: 'Build-Logs'
      condition: always()
