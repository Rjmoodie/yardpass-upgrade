# Codemagic configuration for YardPass iOS builds with Appetize support
workflows:
  ios-workflow:
    name: YardPass iOS Workflow
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      ios_signing:
        distribution_type: development
        bundle_identifier: com.yardpass.app
      vars:
        # YardPass Environment Variables
        VITE_SUPABASE_URL: $VITE_SUPABASE_URL
        VITE_SUPABASE_ANON_KEY: $VITE_SUPABASE_ANON_KEY
        VITE_SUPABASE_FUNCTIONS_URL: $VITE_SUPABASE_FUNCTIONS_URL
        VITE_STRIPE_PUBLISHABLE_KEY: $VITE_STRIPE_PUBLISHABLE_KEY
        VITE_MAPBOX_ACCESS_TOKEN: $VITE_MAPBOX_ACCESS_TOKEN
        # Optional: Set in Codemagic UI for auto-upload to Appetize
        APPETIZE_API_TOKEN: $APPETIZE_API_TOKEN
      node: 20
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: develop
          include: true
          source: true
    scripts:
      - name: Install dependencies
        script: |
          # Handle lock file sync issues
          npm ci || npm install

      - name: Create environment file
        script: |
          echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" >> .env.local
          echo "VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY" >> .env.local
          echo "VITE_SUPABASE_FUNCTIONS_URL=$VITE_SUPABASE_FUNCTIONS_URL" >> .env.local
          echo "VITE_STRIPE_PUBLISHABLE_KEY=$VITE_STRIPE_PUBLISHABLE_KEY" >> .env.local
          echo "VITE_MAPBOX_ACCESS_TOKEN=$VITE_MAPBOX_ACCESS_TOKEN" >> .env.local

      - name: Build web assets
        script: |
          npm run build

      - name: Setup Capacitor
        script: |
          npm install -g @capacitor/cli
          # Add iOS platform (safe to run multiple times)
          npx cap add ios || echo "iOS platform already exists"
          # Copy web assets and sync native code
          npx cap copy ios
          npx cap sync ios

      - name: Update iOS app configuration
        script: |
          # Update bundle ID and display name
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.yardpass.app" ios/App/App/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName YardPass" ios/App/App/Info.plist
          
          # Add required permissions for iOS features
          /usr/libexec/PlistBuddy -c "Add :NSLocationWhenInUseUsageDescription string 'We use your location to show nearby events.'" ios/App/App/Info.plist 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :NSCameraUsageDescription string 'Camera access is used for QR codes and posts.'" ios/App/App/Info.plist 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :NSPhotoLibraryUsageDescription string 'Photo library access is used to attach pictures to posts.'" ios/App/App/Info.plist 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :NSMicrophoneUsageDescription string 'Microphone access is used for videos.'" ios/App/App/Info.plist 2>/dev/null || true

      # -------- SIMULATOR BUILD (for Appetize) ----------
      - name: Build iOS Simulator for Appetize
        script: |
          set -e
          echo "Building YardPass for iOS Simulator..."
          
          # Build Release configuration for iOS Simulator
          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphonesimulator \
            -derivedDataPath $CM_BUILD_DIR/derived_data \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=NO
            
          echo "iOS Simulator build completed successfully!"

      - name: Create Appetize-compatible zip
        script: |
          # Path to the built .app
          APP_PATH="$CM_BUILD_DIR/derived_data/Build/Products/Release-iphonesimulator/App.app"
          
          if [ ! -d "$APP_PATH" ]; then
            echo "‚ùå Simulator .app not found at $APP_PATH"
            echo "Available files:"
            find $CM_BUILD_DIR/derived_data -name "*.app" -type d
            exit 1
          fi
          
          echo "‚úÖ Found YardPass app at: $APP_PATH"
          
          # Create Appetize-compatible zip
          cd "$(dirname "$APP_PATH")"
          zip -r "$CM_BUILD_DIR/YardPass_Appetize.zip" "$(basename "$APP_PATH")"
          
          echo "‚úÖ Created Appetize zip: $CM_BUILD_DIR/YardPass_Appetize.zip"
          ls -la "$CM_BUILD_DIR/YardPass_Appetize.zip"

      # -------- OPTIONAL: Auto-upload to Appetize ----------
      - name: Upload to Appetize (optional)
        script: |
          if [ -z "$APPETIZE_API_TOKEN" ]; then
            echo "üîë APPETIZE_API_TOKEN not set; skipping auto-upload."
            echo "üì± Manually upload $CM_BUILD_DIR/YardPass_Appetize.zip to Appetize.io"
            exit 0
          fi
          
          echo "üöÄ Uploading YardPass to Appetize..."
          
          curl -sS https://api.appetize.io/v1/apps \
            -F "file=@$CM_BUILD_DIR/YardPass_Appetize.zip" \
            -F "platform=ios" \
            -F "name=YardPass" \
            -F "note=YardPass Event Platform - Built $(date)" \
            -H "Authorization: Bearer $APPETIZE_API_TOKEN" \
            -o $CM_BUILD_DIR/appetize_response.json
            
          echo "‚úÖ Appetize upload completed!"
          echo "üì± Response:"
          cat $CM_BUILD_DIR/appetize_response.json
          
          # Extract app URL from response
          APP_URL=$(cat $CM_BUILD_DIR/appetize_response.json | grep -o '"publicURL":"[^"]*"' | cut -d'"' -f4)
          if [ ! -z "$APP_URL" ]; then
            echo "üéâ Your YardPass app is live at: $APP_URL"
          fi

      # -------- DEVICE BUILD (IPA) - Optional for TestFlight ----------
      - name: Build iOS Device (.ipa) - Optional
        script: |
          echo "üèóÔ∏è Building YardPass for iOS devices..."
          xcode-project build-ipa \
            --workspace ios/App/App.xcworkspace \
            --scheme App \
            --archive-directory $CM_BUILD_DIR/archive
        when:
          condition: $CODEMAGIC_BRANCH == "main"  # Only build IPA on main branch

    artifacts:
      # Appetize-ready simulator build
      - $CM_BUILD_DIR/YardPass_Appetize.zip
      - $CM_BUILD_DIR/appetize_response.json
      # Device build (optional)
      - build/ios/ipa/*.ipa
      # Logs for debugging
      - /tmp/xcodebuild_logs/*.log

    publishing:
      email:
        recipients:
          - roderickmoodie@yahoo.com
        notify:
          success: true
          failure: true