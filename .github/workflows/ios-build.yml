name: Build iOS App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Remove lock file and do fresh install to avoid sync issues
        rm -f package-lock.json
        npm install
      
    - name: Create environment file
      run: |
        echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.local
        echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.local
        echo "VITE_SUPABASE_FUNCTIONS_URL=${{ secrets.VITE_SUPABASE_FUNCTIONS_URL }}" >> .env.local
        echo "VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}" >> .env.local
        echo "VITE_MAPBOX_ACCESS_TOKEN=${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}" >> .env.local
        
    - name: Build web assets
      run: npm run build
      
    - name: Install Capacitor CLI
      run: npm install -g @capacitor/cli
      
    - name: Initialize Capacitor (if needed)
      run: |
        # Initialize Capacitor if not already done
        if [ ! -f "capacitor.config.ts" ]; then
          npx cap init YardPass com.yardpass.app --web-dir=dist
        fi
        
    - name: Add iOS platform
      run: |
        # Add iOS platform (will skip if already exists)
        echo "Adding iOS platform..."
        npx cap add ios
        echo "iOS platform added successfully"
        
    - name: Sync Capacitor
      run: |
        echo "Syncing Capacitor..."
        npx cap sync ios
        echo "Capacitor sync completed"
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Update iOS project settings
      run: |
        # Update bundle identifier and app name in iOS project
        echo "Updating iOS project configuration..."
        if [ -f "ios/App/App.xcodeproj/project.pbxproj" ]; then
          sed -i '' 's/app\.lovable\.[a-zA-Z0-9]*/com.yardpass.app/g' ios/App/App.xcodeproj/project.pbxproj
          sed -i '' 's/yardpass-upgrade/YardPass/g' ios/App/App.xcodeproj/project.pbxproj
          echo "iOS project updated successfully"
        else
          echo "iOS project file not found, skipping update"
        fi
        
    - name: List iOS project structure
      run: |
        echo "iOS project structure:"
        ls -la ios/
        if [ -d "ios/App" ]; then
          ls -la ios/App/
        fi
        
    - name: List Available Simulators
      run: |
        echo "Available iOS Simulators:"
        xcrun simctl list devices ios
        echo "Available iOS SDKs:"
        xcodebuild -showsdks | grep -i ios || echo "SDK listing failed, continuing anyway"
        
    - name: Build iOS app for Simulator
      run: |
        cd ios/App
        echo "Building iOS app for simulator..."
        
        # Build for iOS Simulator with generic destination (no signing required)
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Debug \
                   -destination 'generic/platform=iOS Simulator' \
                   -derivedDataPath ../../build/ios \
                   build
                   
        echo "iOS build completed successfully!"
        
    - name: Create iOS Simulator and Test App
      run: |
        echo "Creating iOS Simulator..."
        
        # Use iPhone 16 with iOS 18.6 (available from the list above)
        echo "Using iPhone 16 with iOS 18.6..."
        
        # Create and boot simulator - let Xcode pick the best match
        SIMULATOR_ID=$(xcrun simctl create "YardPass-Test" "iPhone 16")
        echo "Created simulator: $SIMULATOR_ID"
        
        # Boot the simulator
        xcrun simctl boot "$SIMULATOR_ID"
        echo "Simulator booted successfully"
        
        # Wait for simulator to fully boot
        sleep 15
        
        # Find the built app
        BUILT_PRODUCTS_DIR="./build/ios/Build/Products/Debug-iphonesimulator"
        if [ -d "$BUILT_PRODUCTS_DIR/App.app" ]; then
          echo "Installing YardPass app on simulator..."
          xcrun simctl install "$SIMULATOR_ID" "$BUILT_PRODUCTS_DIR/App.app"
          
          echo "Launching YardPass app..."
          xcrun simctl launch "$SIMULATOR_ID" com.yardpass.app
          
          # Take a screenshot
          echo "Taking screenshot..."
          xcrun simctl io "$SIMULATOR_ID" screenshot ./yardpass-screenshot.png
          
          echo "App tested successfully in simulator!"
          
          # Create downloadable app bundle
          cd "$BUILT_PRODUCTS_DIR"
          zip -r ../../../YardPass-Simulator.zip App.app/
          
        else
          echo "Build failed - no .app bundle found"
          echo "Contents of build directory:"
          find ./build -name "*.app" -type d
          exit 1
        fi
        
        # Clean up simulator
        xcrun simctl shutdown "$SIMULATOR_ID"
        xcrun simctl delete "$SIMULATOR_ID"
        
    - name: Upload iOS Simulator App
      uses: actions/upload-artifact@v4
      with:
        name: YardPass-iOS-Simulator-${{ github.sha }}
        path: YardPass-Simulator.zip
        retention-days: 30
        
    - name: Upload Screenshot
      uses: actions/upload-artifact@v4
      with:
        name: App-Screenshot-${{ github.sha }}
        path: yardpass-screenshot.png
        retention-days: 30
        if-no-files-found: ignore